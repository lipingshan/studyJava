建造者（Builder）模式：
将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，最后构建成该复杂对象。
https://blog.csdn.net/Arthurs_L/article/details/81287128
http://c.biancheng.net/view/1354.html

》》》个人理解
正常情况下创建一个对象为
new People(A,B,C,...)
或者
People people = new People();
people.setName("小明");
people.setAge(26);
然乎后面跟着，调用
people.showMessage();
这种方式是对象的创建和调用在一起。

建造者模式，主要是对new(A,B,C),或者 setter 的封装和优化
上面这中将调用和创建写在一起的做法，
如果在创建一个复杂对象的时候，就会给调用带来很大麻烦。
另外在修改时，调用的代码尽量不应该做变化，这就要求调用的过程必须简短，不能涉及对象的创建细节。

建造者模式的思路是将对象（People的对象people）的 new  set 动作交给建造者Builder实施，
由一个组织者Director 对建造者的一系列的实施动作进行组合。
在调用时，调用者只需要建造者实现对象，和组织者就可以获取people对象。

》》》正式说明
模式的定义与特点
建造者（Builder）模式的定义：指将一个复杂对象的构造与它的表示分离，使同样的构建过程可以创建不同的表示，这样的设计模式被称为建造者模式。它是将一个复杂的对象分解为多个简单的对象，然后一步一步构建而成。它将变与不变相分离，即产品的组成部分是不变的，但每一部分是可以灵活选择的。

该模式的主要优点如下：
各个具体的建造者相互独立，有利于系统的扩展。
客户端不必知道产品内部组成的细节，便于控制细节风险。

其缺点如下：
产品的组成部分必须相同，这限制了其使用范围。
如果产品的内部变化复杂，该模式会增加很多的建造者类。

建造者（Builder）模式和工厂模式的关注点不同：建造者模式注重零部件的组装过程，而工厂方法模式更注重零部件的创建过程，但两者可以结合使用。
模式的结构与实现
建造者（Builder）模式由产品、抽象建造者、具体建造者、指挥者等 4 个要素构成，现在我们来分析其基本结构和实现方法。
1. 模式的结构
建造者（Builder）模式的主要角色如下。
产品角色（Product）：它是包含多个组成部件的复杂对象，由具体建造者来创建其各个滅部件。
抽象建造者（Builder）：它是一个包含创建产品各个子部件的抽象方法的接口，通常还包含一个返回复杂产品的方法 getResult()。
具体建造者(Concrete Builder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。
指挥者（Director）：它调用建造者对象中的部件构造与装配方法完成复杂对象的创建，在指挥者中不涉及具体产品的信息。